{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Obsidian Notes","text":"<p>Welcome to my personal Git Hub page, where should hopefully be documentation for my published projects. Good luck a hodn\u011b zdaru!</p> <p>When I wrote this code, only God and I understood what it did. Now, only God knows.</p>"},{"location":"#quantum-boyz-red-pitaya-guide-here","title":"Quantum Boyz Red Pitaya guide here","text":"<p>Kudos to https://github.com/jobindjohn/obsidian-publish-mkdocs/</p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/FAQ/","title":"FAQ","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/FAQ/#how-do-i-change-default-matlab-for-system-generator","title":"How do I change default Matlab for system generator?","text":"<ul> <li>Model composer default Matlab</li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/FAQ/#how-do-i-generate-vivado-project-from-tcl-script","title":"How do I generate Vivado project from .tcl script?","text":"<ul> <li>Rebuilding reference project</li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/FAQ/#how-to-set-ip-repository","title":"How to set IP repository","text":"<ul> <li>Adding folder as IP repository</li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/FAQ/#how-to-access-axi4-lite-registers-from-processor","title":"How to access AXI4-Lite registers from processor","text":"<ul> <li>Memory-mapped address mess</li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/FAQ/#tags-internal_rp_guide","title":"Tags: #Internal_RP_Guide","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Intro/","title":"Intro","text":"<p>Welcome to Quantum Boyz\u2122 Red Pitaya guide!</p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Intro/#see-faq","title":"See FAQ","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Intro/#see-reference-project-documentation","title":"See Reference project documentation","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Intro/#see-server-library","title":"See Server library","text":"<p>Created (and supposed to be maintained) by Vojt\u011bch Mlyn\u00e1\u0159</p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Dev/Generating%20Tcl%20script%20for%20projects/","title":"Generating Tcl script for projects","text":"<p>Use this tcl command to generate project script:  ![[TCL commands#^023c52]]</p> <p>Then modify it to relative paths (source): 1. Replace these lines: </p> <pre><code># Set the reference directory for source file relative paths \nset origin_dir \".\" \n\n# Set the directory path for the original project from where this script was exported \nset orig_proj_dir \"[file normalize \"$origin_dir/orig-project\"]\" \n\n# Create project \ncreate_project ${_xil_proj_name_} \"/proj_ref_7020\" -part xc7z020clg400-1\n</code></pre> <ol> <li>With:</li> </ol> <pre><code># Set the reference directory to where the script is \nset origin_dir [file dirname [info script]] \n\n# Create project \ncreate_project ${_xil_proj_name_} $origin_dir -part xc7z020clg400-1 \n</code></pre> <ol> <li>Replace all absolute paths</li> </ol> <pre><code>D:/0_Git/RP_InvPot/impl/\n\n#e.g. D:/0_Git/RP_InvPot/impl/proj/proj_ref_7020\n</code></pre> <ol> <li>With:</li> </ol> <pre><code>$origin_dir/../../\n\n#e.g. ../../proj/proj_ref_7020\n</code></pre> <ol> <li>Find line</li> </ol> <pre><code>set file_obj [get_files -of_objects [get_filesets constrs_1] [list \"*$file\"]]\n</code></pre> <ol> <li>And delete the <code>*</code> in front of <code>$file</code> </li> </ol>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/ARM/Server%20library/","title":"Server library","text":"<p>Page intentionally left blank</p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/","title":"Reference project documentation","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#intro","title":"Intro","text":"<p>This reference project should serve as both a reference material and template for other implementations. As a rule of thumb, you are free to modify/delete any light-blue IP cores and any interconnection to/from/between them. There are three subsystems (dark-blue1) that provide basic functionality2, unless you have a specific requirement, you shouldn't have to do any modifications in any of them. </p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#decision-tree-for-what-you-can-modify","title":"Decision tree for what you can modify:","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#subsystems","title":"Subsystems","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#adc_subsys","title":"ADC_subsys","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#interface","title":"Interface","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#input","title":"Input","text":"<ul> <li>adc_dat_i_a/b[15:0]<ul> <li>Input ports of analog-digital converter, only upper 14 bits are usable. </li> <li>Format 0x0000...0x3FFF (1V...-1V)</li> </ul> </li> <li>adc_clk_i_a/b<ul> <li>Differential clock lines synchronized with ADC - Do not use directly!</li> </ul> </li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#output","title":"Output","text":"<ul> <li>adc_clk<ul> <li>125MHz Clock generated from differential ADC clock, free to use this one</li> </ul> </li> <li>adc_cdcs_o<ul> <li>??? but do not modify and/or disconnect</li> </ul> </li> <li>out_ADC_CH1/2[13:0] <ul> <li>14 bit analog input voltages in 2's complement format, 125 Msps (new sample every 8ns)</li> <li>Numbering corresponds to numbers printed on Red Pitaya PCB</li> </ul> </li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#description","title":"Description","text":"<p>This module takes care of conversion of two things: First is converting signal from parallel lines of external ADC into 2's complement format and the second is generating single-line clock signal from differential clock. Additional hidden functionality explained in the next section.</p> <p>Keep in mind that hardware analog-&gt;digital conversion takes around 100ns, meaning when voltage appears on AIN connector, it takes 100ns before it propagates to the FPGA (programmable logic) itself. </p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#big-boy-functionality","title":"Big boy functionality","text":"<p>Upon expanding the subsystem, apart of signal slicing, there is RTL module axis_red_pitaya_adc_v1_0 which is based on Pavel Demin's ADC and it provides additional functionality of offsetting the signals by constant value. Provide desired offset to ports offset_a/b in 14bit 2's complement format.</p> <p><code>Bypass</code> signal controls whether the addition is performed - 0 - addition bypassed - 1 - addition performed</p> <p>Note: Saturation check is in place, meaning if the addition operation was to over/underflow, it is rather capped at maximum/minimum value of 14 bit (fractional) integer. </p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#dac_subsys","title":"DAC_subsys","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#interface_1","title":"Interface","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#input_1","title":"Input","text":"<ul> <li>data_DAC_CH1/2[13:0]<ul> <li>Signals to be written to analog output ports. </li> <li>14 bit 2's complement</li> </ul> </li> <li>aclk<ul> <li>Clock that the DAC (actual hardware component) will be synchronized to</li> <li>Usually recommended to be connected to ADC clock, but can be run from fclk (PS7 clock as well)</li> </ul> </li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#output_1","title":"Output","text":"<ul> <li>dac_xxx<ul> <li>interface for DAC component, do not modify </li> </ul> </li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#description_1","title":"Description","text":"<p>In similar sense as ADC, this does all necessary data conversion for DAC hardware component. It also generates doubled clock (dac_clk = 2 x aclk) from aclk port. Provide inputs in 2's complement format. <code>aclk</code> port should be connected to the clock domain where signals data_DAC_CH1/2 originate from. </p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#ps7_w_dma_subsys","title":"PS7_w_DMA_subsys","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#interface_2","title":"Interface","text":""},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#input_2","title":"Input","text":"<ul> <li>dma_input_CH1/2[31:0]<ul> <li>Input port for the data you want to record into external RAM (the big one)</li> <li>Bit-format of the data doesn't matter, it is parsed 1:1 into the memory and then you have to postprocess to extract the signals</li> </ul> </li> <li>wr_clk<ul> <li>Clock associated with dma_input_CH1/2 signals</li> </ul> </li> <li>trigger_in_hw<ul> <li>optional functionality to trigger DMA packet with PL signal instead of AXI register</li> <li>valid trigger signal is transition from 0 to 1</li> <li>new trigger signal ignored until current transfer is completed</li> </ul> </li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#output_2","title":"Output","text":"<ul> <li>clk<ul> <li>also <code>fclk</code> - 125 MHz clock synchronized with the ARM processor and AXI bus</li> <li>IMPORTANT: phase between this clock and ADC clock is undeterministic, so make sure to treat clock-domain crossing appropriately</li> </ul> </li> <li>aresetn<ul> <li>reset signal generated by the processor</li> <li>Active-low (0-reset, 1-no reset)</li> </ul> </li> <li>M00_AXI<ul> <li>AXI4 interface connected usually to your generated IP core</li> </ul> </li> <li>DDR, FIXED_IO<ul> <li>do not delete, do not modify!</li> <li>if DDR connection is severed, than the ARM processor is disconnected from the RAM as well, meaning you have to hard-reset Red Pitaya to get linux and everything back. </li> </ul> </li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#description_2","title":"Description","text":"<p>This subsystem packages PS7 IP core (representing ARM processor in the PL) and DMA subsystem. DMA subsystem is probably going to evolve, so make sure to read changelog if you upgrade the DMA IP core in your design. </p>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Internal%20reference%20design/Vivado/Reference%20project%20documentation/#dma-operation","title":"DMA operation","text":"<p>In the background, the procedure of recording data into RAM requires Xilinx DMA IP core (with Scatter-Gather engine) and throttle IP core module. Throttle IP core adds necessary signalling to convert continuous stream to AXI-Stream protocol. To initiate data recording, both throttle and DMA must be configured appropriately via the ARM processor (documented in Server library). By default, data transfer is initiated from AXI interface (i.e. by processor), but it can also be configured to wait for hardware signal (in the PL itself) instead.</p> <ol> <li> <p>Dark-blue are considered subsystems ADC_subsys, DAC_subsys, PS7_w_DMA_subsys \u21a9</p> </li> <li> <p>Analog&lt;-&gt;Digital conversion, memory access and processor interface\u00a0\u21a9</p> </li> </ol>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Issues/Adding%20folder%20as%20IP%20repository/","title":"Adding folder as IP repository","text":"<ol> <li>Open project in Vivado</li> <li>Click on Tools in upper toolbar</li> <li>Click Settings</li> <li>Expand IP under Project Settings</li> <li>Click Repository</li> <li>Click + symbol and select folder<ol> <li>For Reference project that is <code>GITREPO/impl/srcs/ips</code></li> </ol> </li> <li>Apply changes and close the window</li> </ol>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Issues/Memory-mapped%20address%20mess/","title":"Memory mapped address mess","text":"<p>Every address you see in Vivado corresponds to single byte (8-bits).</p> <p>When you map address space of certain AXI interface in Linux using code below, you have to provide the same offset you see in Vivado address editor (i.e. 0x4040000 by default for DMA)</p> <pre><code>#define DMA_AXI_ADDR 0x40400000\n\n// Open /dev/mem which represents the whole physical memory\nint dh = open(\"/dev/mem\", O_RDWR | O_SYNC); \n\n// Create reference (pointer) to mapped memory at offset DMA_AXI_ADDR\n// with length 0xFFFF (in bytes)\nunsigned int *dma_address = mmap(NULL, 0xFFFF,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0PROT_READ | PROT_WRITE,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0MAP_SHARED, dh, DMA_AXI_ADDR);\n</code></pre> <p>If you afterwards want to access register within the memory space <code>dma_address</code>, you have to bitshift the register offset by 2 bits (or divide by 4), because ARM is addressing at 32-bit increments, such as:</p> <pre><code>#define REGISTER_OFFSET 0x100\n\nint new_value_1 = 42;\nint new_value_2 = 911;\n\n// This writes new_value_1 to address 0x40400100 and\n// new_value_2 to address 0x40400104\n*(dma_address + (REGISTER_OFFSET&gt;&gt;2)) = new_value_1;\n*(dma_address + (REGISTER_OFFSET&gt;&gt;2) + 1) = new_value_2;\n\n</code></pre> <p>If you want to access specific byte within address, you need to utilize bit-masking:</p> <pre><code>uint8_t new_byte = 255;\n\n// This writes new_byte into address 0x40400101\nuint32_t old_value = *(dma_address + (REGISTER_OFFSET&gt;&gt;2));\n*(dma_address + (REGISTER_OFFSET&gt;&gt;2)) = (old_value &amp; ~((uint32_t)(0xFF00)) ) | ((uint32_t)(new_byte)&lt;&lt;8);\n\n// (old_value &amp; ~((uint32_t)(0xFF00))) This reads register value and erases\n// second (LSB) byte. \n//\n// ((uint32_t)(new_byte)&lt;&lt;8) This shifts a new byte to appropriate position\n// casts it to 32 bit integer. Or (|) between the brackets writes into the byte\n\n</code></pre>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Issues/Model%20composer%20default%20Matlab/","title":"Model composer default Matlab","text":"<ul> <li>Open environment variables editor</li> <li>Edit <code>Path</code> in System Variables</li> <li>Move path <code>MatlabRxxx/bin</code> higher up then other versions</li> </ul>"},{"location":"Quantum%20Boyz%20Red%20Pitaya%20guide/Issues/Rebuilding%20reference%20project/","title":"Rebuilding reference project","text":"<ol> <li>Clone Git repo https://github.com/VojtechMlynar/RedPitaya_InvertedPotential</li> <li>Navigate folder <code>GITREPO/impl/proj/proj_ref_7020</code></li> <li>Copy script <code>proj_ref_7020_main.tcl</code> to another folder <code>GITREPO/impl/proj/YOURPROJ</code></li> <li>Run Vivado 2020.2<ol> <li>If Tcl console is not open, open it: Upper toolbar -&gt; Window -&gt; Tcl console</li> </ol> </li> <li>Navigate <code>YOURPROJ</code> folder using command <code>cd absolutefolderpath/YOURPROJ</code></li> <li>Enter command <code>source proj_ref_7020_main.tcl</code></li> <li>Wait for the project to rebuild and open</li> </ol> <p>Additional notes: - You may need to add <code>GITREPO/impl/srcs/ips</code> as an IP repository </p>"}]}